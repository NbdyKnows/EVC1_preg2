package com.example.accessingdatamysql;

import java.util.Map;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import org.springframework.jdbc.core.JdbcTemplate;
import java.util.List;
import java.util.Map;
import java.lang.String;
import java.lang.Object;

@Controller // This means that this class is a Controller
@RequestMapping(path="/mascotas") // This means URL's start with /demo (after Application path)
public class MainController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
    private PetsRepository petsRepository;

    @Autowired
    private JdbcTemplate jdbcTemplate;



    @PostMapping(path="/add")
    public @ResponseBody String addNewUser (@RequestParam String nombre
        , @RequestParam String raza, @RequestParam String propietario) {

    Pets p = new Pets();
    p.setNombre(nombre);
    p.setRaza(raza);
    p.setPropietario(propietario);
    petsRepository.save(p);
    return "Saved";
    }

    @GetMapping(path="/all") 
    public @ResponseBody Iterable<Pets> getAllPets() {
        //* This returns a JSON or XML with the users
        return petsRepository.findAll();
    }

    @GetMapping(path="/ver/{id}") 
    public @ResponseBody Pets getPet(@PathVariable("id") Integer id) {
        return petsRepository.findById(id).orElse(null);
    }

    @PutMapping(path="/edit")
    public @ResponseBody String editPet(@RequestParam Integer id, 
                                        @RequestParam String nombre, 
                                        @RequestParam String raza,
                                        @RequestParam String propietario){
        Pets pet = petsRepository.findById(id).orElse(null);
        if(pet != null){
            pet.setNombre(nombre);
            pet.setRaza(raza);
            pet.setPropietario(propietario);
            petsRepository.save(pet);
            return "Edited";
        }
        return "Not Found";
    }

    @DeleteMapping(path = "/del")
    public @ResponseBody String deletePet(@RequestParam Integer id){
        Pets pet = petsRepository.findById(id).orElse(null);
        if(pet != null){
            petsRepository.delete(pet);
            return "Deleted";
        }
        return "Not Found";
    }

    @GetMapping(path="/get/report")
    public @ResponseBody List getReport() {
        String sql = "SELECT CONCAT('Nombre: ',nombre,' - Raza: ', raza, ' DueÃ±o ==> ', propietario) as reporte FROM pets";
        List<Map<String, Object>> queryResult = jdbcTemplate.queryForList(sql);
        return queryResult;
    }

}